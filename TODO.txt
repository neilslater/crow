TODO:

Crow follow ups:

  * Standardise NArray code to always use references to narray structs, not additional caches
    * Add (inline+general) helper functions to get shape, ptr DONE
    * Standard temp var names when narray, shape or ptr values needed
    * Remove shape_var, ptr_cache etc

  * Break down structures in TypeMap: Initialisor & Support Vars (Implied additional TypeMaps on the struct)

      Core attr: name:, ruby_name:, pointer:, ctype:,  parent_struct:, ruby_read:, ruby_write:

      Init attr: default:, init_expr:, size_expr:, shape_expr:, shape_exprs:, rank_expr:, parent_typemap

      Support attr: shape_var:, ptr_cache:, parent_typemap

  * Struct class using strictly hash-based initialiser

  * Specs - How to do test at all?
    * libdef - moderate complexity build

  * Templates for spec files of target system
    * Start with assertions that classes exist (done)
    * Instantiate using parameters (done)

  * Add validation rules for parameters, and use to generate minimal test instantiations

  * Factor end C code into generated and "user" parts

  * bool vars - add <stdbool.h>

  * enum vars - map C enum to set of Ruby Symbols?

  * Template pointers as read/write from Ruby (requires associated shape)

  * Automated support for Marshal

  * Allow writable NArrays?

  * Allow NArrays as input and use them for initialisers

  * Allow other structs as input and unwrap them

  * Add ruby class initialisers to their .h files (so classes can init other classes)

  * Support changes to structs/classes without breaking added code (also adding new structs...)

  * Allow short struct pointer names

  * Allow non-allocated pointers

  * enum variable type

  * Public attribute names != struct attribute names

  * Validating init params (use temp vars to unpack and test)

  * Validating/casting NArray inputs on Ruby class level

  * Support for Marshal serialise via hash

  * Taking named hash params for Ruby init

  * Build from a YAML definition

  * Init params automatically generated from any item with init_expr='*'

  * More pre-built utilities:
    * Sorting, shuffling, random numbers
    *
